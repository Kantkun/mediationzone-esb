<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE pythonmodule_profile SYSTEM "jar:/mz/dtd/pythonmodule_profile.dtd">
<pythonmodule_profile category="Internal">
   <storable name="pythonmodule_profile" storable-id="dr.Configuration" ver="6.0">
      <array classname="java.lang.String" name="Access Groups -read -write -execute" size="3">
         <string name="0" value="All"/>
         <string name="1" value="Administrator"/>
         <string name="2" value="All"/>
      </array>
      <storable name="Auxiliary Data" null="true"/>
      <string name="Current Comment" null="true"/>
      <storable name="Data" storable-id="dr.PythonModuleData" ver="1.0">
         <object name="Source Code">
            <storable name="Object Internal" storable-id="dr.DRGeneratedFromContract$Field$FieldWrapper" ver="1.0">
               <object name="Value">
                  <string name="Object Internal"><![CDATA[#import lib, ultra
import os, sys, datetime, fcntl 
#from os.path import join, getsize
#import datetime

#constant
#default path
mzPath = "/mzdata"

#servType = service type: inbound/outbound

def writeLogger(servType, reqID, logType, xmlString, socketString, serviceName, responseStatus, channelName, restString, exContext):
    uuid = reqID
    xmlContent = xmlString
    socketContent = socketString
    restContent = restString
    
    currentDateStr = datetime.datetime.today().strftime('%Y%m%d')
    currentLogTimeStr = datetime.datetime.today().strftime('%H%M')
    currentDatetimeStr = datetime.datetime.today().strftime('%Y-%m-%d %H:%M:%S')
    
    newContentToSave = ""
    newContentToSave = newContentToSave + currentDatetimeStr + " : " + serviceName + " (" + logType + ")" + "\r\n"
    newContentToSave = newContentToSave + "UUID: " + uuid + "\r\n"
    
    if logType == "response":
        newContentToSave = newContentToSave + "Response Status: " + responseStatus + "\r\n"
    
    #message alignment from service type        
    if servType == "Outbound":
        newContentToSave = newContentToSave + "Socket " + logType + ":" + "\r\n" + socketContent + "\r\n"
        newContentToSave = newContentToSave + "XML " + logType + ":" + "\r\n" + xmlContent + "\r\n"
    else:
        newContentToSave = newContentToSave + "XML " + logType + ":" + "\r\n" + xmlContent + "\r\n"
        newContentToSave = newContentToSave + "Socket " + logType + ":" + "\r\n" + socketContent + "\r\n"
    
    if restContent != '':
        newContentToSave = newContentToSave + "REST " + logType + ":" + "\r\n" + restContent + "\r\n"
    newContentToSave = newContentToSave + "\r\n" #separate line
    
    #print newContentToSave
    
    #Check file exist
    logPath = "/" + channelName + "ServiceLog"
    hourPath = "/" + currentDateStr
    
#    if exContext == "ecsa1":
#        mzPath = "/mzdata1";
#    else:
#        mzPath = "/mzdata2";

    if exContext == "ecsa1":
        mzPath = "/mzdata1";
    elif exContext == "ecsa2":
        mzPath = "/mzdata2";
    else:
        mzPath = "/mzdata1";
    
    saveLogPath = mzPath + logPath + hourPath
    #pattern name log ex. IMBService_201808071554.log
    saveFileName = channelName + "Service_" + currentDateStr + currentLogTimeStr + ".log"
    
    #for root, dirs, files in os.walk(saveLogPath):
    #    for f in files:
    #        if(f == saveFileName):
    #            #debug("file exist.")
    #            currentContent = ''
    #            with open(saveLogPath + "/" + saveFileName, 'r') as currentFile:
    #                currentContent = currentFile.read()
    #                #debug(currentContent)
    #            newContentToSave = currentContent + newContentToSave
    #            #delete current file
    #            os.remove(saveLogPath + "/" + saveFileName)  
    #    break;
                 
    #save file log    
    if os.path.exists(mzPath) != True:
        print mzPath + " not exist"
        #os.chdir("/")
        try:
            os.mkdir(mzPath, 0755)
        except OSError:
            print mzPath + " is exist"
    else:
        print mzPath + " is exist"
    
    if os.path.exists(mzPath + logPath) != True:
        print logPath + " not exist"
        #os.chdir(mzPath) #/mzdata
        try:
            os.mkdir(mzPath + logPath, 0755)
        except OSError:
            print logPath + " is exist"
    else:
        print logPath + " is exist"
    
    if os.path.exists(mzPath + logPath + hourPath) != True:
        #print hourPath + " not exist"
        #os.chdir(mzPath + logPath) #/mzdata/CBSUtilityServiceLog
        try:
            os.mkdir(mzPath + logPath + hourPath, 0755)
        except OSError:
            print hourPath + " is exist"
    else:
        print hourPath + " is exist"      
        
    #print os.stat(saveLogPath + "/" + saveFileName).st_size
    #filePath = os.path.join(saveLogPath, saveFileName)
    #print os.path.splitext(os.path.basename(filePath))[0]
        
    with open(os.path.join(saveLogPath, saveFileName),"a") as fw:
        fcntl.flock(fw, fcntl.LOCK_EX)
        fw.write(newContentToSave.encode("utf8"))
        fcntl.flock(fw, fcntl.LOCK_UN)
        
        #fw.write(newContentToSave.encode("utf8"))
        #fw.close()
    
    #print newContentToSave.encode("utf8")
    print "saved"
def trackTCPLog(reqID, serviceName, channelName, exContext, startTime, stopTime):
    uuid = reqID
    currentDateStr = datetime.datetime.today().strftime('%Y%m%d')
    currentLogTimeStr = datetime.datetime.today().strftime('%H%M')
    currentDatetimeStr = datetime.datetime.today().strftime('%Y-%m-%d %H:%M:%S')
        
    newContentToSave = ""
    newContentToSave = newContentToSave + currentDatetimeStr + " : " + serviceName + "\r\n"
    newContentToSave = newContentToSave + "UUID: " + uuid + "\r\n"
    newContentToSave = newContentToSave + "start time(ms) : " + startTime + "\r\n"
    newContentToSave = newContentToSave + "stop time(ms)  : " + stopTime + "\r\n"
    newContentToSave = newContentToSave + "======================================================\r\n"
        
    #Check file exist
    logPath = "/" + channelName + "TrackingTCPLog"
    hourPath = "/" + currentDateStr
        
    if exContext == "ecsa1":
        mzPath = "/mzdata1";
    else:
        mzPath = "/mzdata2";
     
    saveLogPath = mzPath + logPath + hourPath
    #pattern name log ex. IMBService_201808071554.log
    saveFileName = channelName + "TrackingTCPLog_" + currentDateStr + currentLogTimeStr + ".log"
    
    #save file log    
    if os.path.exists(mzPath) != True:
        print mzPath + " not exist"
        #os.chdir("/")
        try:
            os.mkdir(mzPath, 0755)
        except OSError:
            print mzPath + " is exist"
    else:
        print mzPath + " is exist"
    
    if os.path.exists(mzPath + logPath) != True:
        print logPath + " not exist"
        #os.chdir(mzPath) #/mzdata
        try:
            os.mkdir(mzPath + logPath, 0755)
        except OSError:
            print logPath + " is exist"
    else:
        print logPath + " is exist"
    
    if os.path.exists(mzPath + logPath + hourPath) != True:
        #print hourPath + " not exist"
        #os.chdir(mzPath + logPath) #/mzdata/CBSUtilityServiceLog
        try:
            os.mkdir(mzPath + logPath + hourPath, 0755)
        except OSError:
            print hourPath + " is exist"
    else:
        print hourPath + " is exist"      
        
    with open(os.path.join(saveLogPath, saveFileName),"a") as fw:
        fcntl.flock(fw, fcntl.LOCK_EX)
        fw.write(newContentToSave.encode("utf8"))
        fcntl.flock(fw, fcntl.LOCK_UN)

    print "saved"
def dump(obj):
   for attr in dir(obj):
       if hasattr( obj, attr ):
           print( "obj.%s = %s" % (attr, getattr(obj, attr)))]]></string>
               </object>
            </storable>
         </object>
         <boolean name="Source Code active" value="true"/>
         <string name="Source Code extref key" null="true"/>
         <enum name="Source Code fit" storable-id="dr.DRFieldInstanceType" value="FINAL"/>
         <boolean name="Source Code mod" value="false"/>
         <boolean name="Source Code pres" value="true"/>
      </storable>
      <string name="Folder" value="Common"/>
      <boolean name="Is Dirty" value="false"/>
      <boolean name="Is Encrypted" value="false"/>
      <boolean name="Is Locked" value="false"/>
      <boolean name="Is Valid" value="true"/>
      <string name="Key" value="MZ1531729123127"/>
      <string name="Modified By" value="mzadmin"/>
      <long name="Modified Date" value="1565842936334"/>
      <string name="Name" value="PYM_SYS_Logger"/>
      <string name="Owner" value="mzadmin"/>
      <string name="Type" value="Python Module"/>
      <int name="Version" value="37"/>
      <string name="documentation" value=""/>
      <string name="parameters" value=""/>
   </storable>
</pythonmodule_profile>
