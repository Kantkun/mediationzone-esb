<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE exportmultiplex SYSTEM "jar:/mz/dtd/export_multiplex.dtd">
<exportmultiplex category="Ultra_Format" ref_path="ultra_format[Internal]/storable[ultra_format]/storable[Data]">
   <string name="Definition"><![CDATA[
external TLLOG {    
    
    //TLLOG
    ascii	TLBID	: character_encoding("cp838"),	static_size(10),	padded_with(0x40);
    bcd	    TLBSEQ : static_size(5), align(right);
    ascii	TLBCOR	: static_size(1),	padded_with(0x40);		
    bcd	    TLBOSQ	: static_size(5),	padded_with(0x40), align(right);		
    ascii	TLBTCD : character_encoding("cp838"),	static_size(10),	padded_with(0x40);
    ascii	TLBTDT : character_encoding("cp838"),	static_size(8),	padded_with(0xF0),	align(right);
    ascii	TLBEDT	: character_encoding("cp838"),	static_size(8),	padded_with(0xF0),	align(right);
    ascii	TLBCUD	: character_encoding("cp838"),	static_size(7),	padded_with(0x40);
    ascii	TLBWS	: character_encoding("cp838"),	static_size(10),	padded_with(0x40);
    ascii	TLBSOV	: static_size(10),	padded_with(0x40);		
    ascii	TLBBRC	: character_encoding("cp838"), static_size(5),	align(right), padded_with(0xF0);
    bcd	    TLBBNK : static_size(2), align(right);
    ascii	TLBPST	: static_size(2), padded_with(0xF0);		
    ascii	TLBAPM : character_encoding("cp838"),	static_size(1),	padded_with(0xF0),	align(right);
    ascii	TLBFRD	: static_size(1),	padded_with(0x40);		
    ascii	TLBTRN	: static_size(1),	padded_with(0x40);		
    ascii	TLBRBD	: static_size(1),	padded_with(0x40);		
    ascii	TLBTLO	: static_size(1),	padded_with(0x40);		
    ascii	TLBSVO	: static_size(1),	padded_with(0x40);		
    ascii	TLBFEO	: static_size(1),	padded_with(0x40);		
    ascii	TLBREL	: static_size(1),	padded_with(0x40);		
    ascii	TLBLCSUP	: static_size(10),	padded_with(0x40);		
    ascii	TLBTXREF	: static_size(22),	padded_with(0x40);		
    ascii	TLBGLREF	: character_encoding("cp838"),	static_size(20),	padded_with(0x40);
    ascii	TLBSRCSYS	: character_encoding("cp838"),	static_size(4),	padded_with(0x40);
    ascii	TLBGLFNO	: static_size(10),	padded_with(0x40);		
    ascii	TLBRVREF	: static_size(22),	padded_with(0x40);		
    
    //TLBF
    bcd	    TLBF01: static_size(10), align(right);			
    bcd	    TLBF02: static_size(10), align(right);			
    bcd	    TLBF03: static_size(10), align(right);			
    bcd	    TLBF04: static_size(10), align(right);			
    bcd	    TLBF05	: static_size(10), align(right);			
    bcd	    TLBF06: static_size(10), align(right);			
    bcd	    TLBF07	: static_size(10), align(right);			
    bcd	    TLBF08: static_size(10), align(right);			
    bcd	    TLBF09	: static_size(10), align(right);			
    bcd	    TLBF10: static_size(10), align(right);			
    bcd	    TLBF11: static_size(10), align(right);			
    bcd	    TLBF12: static_size(10), align(right);			
    bcd	    TLBF13: static_size(10), align(right);			
    bcd	    TLBF14: static_size(10), align(right);			
    bcd	    TLBF15	: static_size(10), align(right);			
    bcd	    TLBF16: static_size(10), align(right);			
    bcd	    TLBF17	: static_size(10), align(right);			
    bcd	    TLBF18: static_size(10), align(right);			
    bcd	    TLBF19	: static_size(10), align(right);			
    bcd	    TLBF20: static_size(10), align(right);			
    bcd	    TLBF21	: static_size(10), align(right);			
    bcd	    TLBF22	: static_size(10), align(right);			
    bcd	    TLBF23	: static_size(10), align(right);			
    bcd	    TLBF24	: static_size(10), align(right);			
    bcd	    TLBF25	: static_size(10), align(right);			
    bcd	    TLBF26	: static_size(10), align(right);			
    bcd	    TLBF27	: static_size(10), align(right);			
    bcd	    TLBF28	: static_size(10), align(right);			
    bcd	    TLBF29	: static_size(10), align(right);			
    bcd	    TLBF30	: static_size(10), align(right);			
    bcd	    TLBF31	: static_size(10), align(right);			
    bcd	    TLBF32	: static_size(10), align(right);			
    bcd	    TLBF33	: static_size(10), align(right);			
    bcd	    TLBF34	: static_size(10), align(right);			
    bcd	    TLBF35	: static_size(10), align(right);			
    bcd	    TLBF36	: static_size(10), align(right);			
    bcd	    TLBF37	: static_size(10), align(right);			
    bcd	    TLBF38	: static_size(10), align(right);			
    bcd	    TLBF39	: static_size(10), align(right);			
    bcd	    TLBF40	: static_size(10), align(right);			
    bcd	    TLBF41	: static_size(10), align(right);			
    bcd	    TLBF42	: static_size(10), align(right);			
    bcd	    TLBF43	: static_size(10), align(right);			
    bcd	    TLBF44	: static_size(10), align(right);			
    bcd	    TLBF45	: static_size(10), align(right);	
    		
    ascii	TLBC01	: static_size(1),	padded_with(0x40);		
    ascii	TLBC02	: static_size(1),	padded_with(0x40);		
    ascii	TLBC03	: static_size(1),	padded_with(0x40);		
    ascii	TLBC04	: static_size(1),	padded_with(0x40);		
    ascii	TLBC05	: static_size(1),	padded_with(0x40);		
    ascii	TLBC06	: static_size(1),	padded_with(0x40);		
    ascii	TLBC07	: static_size(1),	padded_with(0x40);		
    ascii	TLBC08	: static_size(1),	padded_with(0x40);		
    ascii	TLBC09	: static_size(1),	padded_with(0x40);		
    ascii	TLBC10	: static_size(1),	padded_with(0x40);		
    ascii	TLBC11	: static_size(1),	padded_with(0x40);		
    ascii	TLBC12	: static_size(1),	padded_with(0x40);		
    ascii	TLBC13	: static_size(1),	padded_with(0x40);		
    ascii	TLBC14	: static_size(1),	padded_with(0x40);		
    ascii	TLBC15	: static_size(1),	padded_with(0x40);		
    ascii	TLBC16	: static_size(1),	padded_with(0x40);		
    ascii	TLBC17	: static_size(1),	padded_with(0x40);		
    ascii	TLBC18	: static_size(1),	padded_with(0x40);		
    ascii	TLBC19	: static_size(1),	padded_with(0x40);		
    ascii	TLBC20	: static_size(1),	padded_with(0x40);		
    ascii	TLBC21	: static_size(1),	padded_with(0x40);		
    ascii	TLBC22	: static_size(1),	padded_with(0x40);		
    ascii	TLBC23	: static_size(1),	padded_with(0x40);		
    ascii	TLBC24	: static_size(1),	padded_with(0x40);		
    ascii	TLBC25	: static_size(1),	padded_with(0x40);		
    ascii	TLBC26	: static_size(1),	padded_with(0x40);		
    ascii	TLBC27	: static_size(1),	padded_with(0x40);		
    ascii	TLBC28	: static_size(1),	padded_with(0x40);		
    ascii	TLBC29	: static_size(1),	padded_with(0x40);		
    ascii	TLBC30	: static_size(1),	padded_with(0x40);		
    ascii	TLBC31	: static_size(1),	padded_with(0x40);		
    ascii	TLBC32	: static_size(1),	padded_with(0x40);		
    ascii	TLBC33	: static_size(1),	padded_with(0x40);		
    ascii	TLBC34	: static_size(1),	padded_with(0x40);		
    ascii	TLBC35	: static_size(1),	padded_with(0x40);		
    ascii	TLBC36	: static_size(1),	padded_with(0x40);		
    ascii	TLBC37	: static_size(1),	padded_with(0x40);		
    ascii	TLBC38	: static_size(1),	padded_with(0x40);		
    ascii	TLBC39	: static_size(1),	padded_with(0x40);		
    ascii	TLBC40	: static_size(1),	padded_with(0x40);		
    ascii	TLBC41	: static_size(1),	padded_with(0x40);		
    ascii	TLBC42	: static_size(1),	padded_with(0x40);		
    ascii	TLBC43	: static_size(1),	padded_with(0x40);		
    ascii	TLBC44	: static_size(1),	padded_with(0x40);		
    ascii	TLBC45	: static_size(1),	padded_with(0x40);		
    ascii	TLBL01	: static_size(1),	padded_with(0x40);		
    ascii	TLBL02	: static_size(1),	padded_with(0x40);		
    ascii	TLBL03	: static_size(1),	padded_with(0x40);		
    ascii	TLBL04	: static_size(1),	padded_with(0x40);		
    ascii	TLBL05	: static_size(1),	padded_with(0x40);		
    ascii	TLBL06	: static_size(1),	padded_with(0x40);		
    ascii	TLBL07	: static_size(1),	padded_with(0x40);		
    ascii	TLBL08	: static_size(1),	padded_with(0x40);		
    ascii	TLBL09	: static_size(1),	padded_with(0x40);		
    ascii	TLBL10	: static_size(1),	padded_with(0x40);		
    ascii	TLBL11	: static_size(1),	padded_with(0x40);		
    ascii	TLBL12	: static_size(1),	padded_with(0x40);		
    ascii	TLBL13	: static_size(1),	padded_with(0x40);		
    ascii	TLBL14	: static_size(1),	padded_with(0x40);		
    ascii	TLBL15	: static_size(1),	padded_with(0x40);		
    ascii	TLBL16	: static_size(1),	padded_with(0x40);		
    ascii	TLBL17	: static_size(1),	padded_with(0x40);		
    ascii	TLBL18	: static_size(1),	padded_with(0x40);		
    ascii	TLBL19	: static_size(1),	padded_with(0x40);		
    ascii	TLBL20	: static_size(1),	padded_with(0x40);		
    ascii	TLBL21	: static_size(1),	padded_with(0x40);		
    ascii	TLBL22	: static_size(1),	padded_with(0x40);		
    ascii	TLBL23	: static_size(1),	padded_with(0x40);		
    ascii	TLBL24	: static_size(1),	padded_with(0x40);		
    ascii	TLBL25	: static_size(1),	padded_with(0x40);		
    ascii	TLBL26	: static_size(1),	padded_with(0x40);		
    ascii	TLBL27	: static_size(1),	padded_with(0x40);		
    ascii	TLBL28	: static_size(1),	padded_with(0x40);		
    ascii	TLBL29	: static_size(1),	padded_with(0x40);		
    ascii	TLBL30	: static_size(1),	padded_with(0x40);		
    ascii	TLBCUR	: static_size(4),	padded_with(0x40);		
    ascii	TLCUR1	: static_size(4),	padded_with(0x40);		
    ascii	TLCUR2	: static_size(4),	padded_with(0x40);		
    ascii	TLCUR3	: static_size(4),	padded_with(0x40);		
    ascii	TLCUR4	: static_size(4),	padded_with(0x40);		
    ascii	TLCUR5	: static_size(4),	padded_with(0x40);		
    ascii	TLCUR6	: static_size(4),	padded_with(0x40);		
    ascii	TLCUR7	: static_size(4),	padded_with(0x40);		
    ascii	TLCUR8	: static_size(4),	padded_with(0x40);		
    bcd	TLBCVT01	: static_size(10), align(right);			
    bcd	TLBCVT02	: static_size(10), align(right);			
    bcd	TLBCVT03	: static_size(10), align(right);			
    bcd	TLBCVT04	: static_size(10), align(right);			
    bcd	TLBCVT05	: static_size(10), align(right);			
    bcd	TLBCVT06	: static_size(10), align(right);			
    bcd	TLBCVT07	: static_size(10), align(right);			
    bcd	TLBCVT08	: static_size(10), align(right);			
    bcd	TLBCVT09	: static_size(10), align(right);			
    bcd	TLBCVT10	: static_size(10), align(right);			
    bcd	TLBCVT11	: static_size(10), align(right);			
    bcd	TLBCVT12	: static_size(10), align(right);			
    bcd	TLBCVT13	: static_size(10), align(right);			
    bcd	TLBCVT14	: static_size(10), align(right);			
    bcd	TLBCVT15	: static_size(10), align(right);			
    bcd	TLBCVT16	: static_size(10), align(right);			
    bcd	TLBCVT17	: static_size(10), align(right);			
    bcd	TLBCVT18	: static_size(10), align(right);			
    bcd	TLBCVT19	: static_size(10), align(right);			
    bcd	TLBCVT20	: static_size(10), align(right);			
    ascii	TLBCCR01	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR02	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR03	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR04	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR05	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR06	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR07	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR08	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR09	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR10	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR11	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR12	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR13	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR14	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR15	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR16	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR17	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR18	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR19	: static_size(1),	padded_with(0x40);		
    ascii	TLBCCR20	: static_size(1),	padded_with(0x40);		
    bcd	TLBAM1	: static_size(10), align(right);			
    bcd	TLBAM2	: static_size(10), align(right);			
    bcd	TLBAM3	: static_size(10), align(right);			
    bcd	TLBAM4	: static_size(10), align(right);			
    bcd	TLBAM5	: static_size(10), align(right);			
    bcd	TLBAM6	: static_size(10), align(right);			
    bcd	TLBAM7	: static_size(10), align(right);			
    bcd	TLBAM8	: static_size(10), align(right);			
    bcd	TLBAM9	: static_size(10), align(right);			
    bcd	TLBAM10	: static_size(10), align(right);			
    bcd	TLBAM11	: static_size(10), align(right);			
    bcd	TLBAM12	: static_size(10), align(right);			
    bcd	TLBAM13	: static_size(10), align(right);			
    bcd	TLBAM14	: static_size(10), align(right);			
    bcd	TLBAM15	: static_size(10), align(right);			
    bcd	TLBAM16	: static_size(10), align(right);			
    bcd	TLBAM17	: static_size(10), align(right);			
    bcd	TLBAM18	: static_size(10), align(right);			
    bcd	TLBAM19	: static_size(10), align(right);			
    bcd	TLBAM20	: static_size(10), align(right);			
    bcd	TLFXRTE1	: static_size(8), align(right);			
    bcd	TLFXRTE2	: static_size(8), align(right);			
    bcd	TLFXRTE3	: static_size(8), align(right);			
    bcd	TLFXRTE4	: static_size(8), align(right);			
    bcd	TLFXRTE5	: static_size(8), align(right);			
    bcd	TLFXRTE6	: static_size(8), align(right);			
    bcd	TLFXRTE7	: static_size(8), align(right);			
    bcd	TLFXRTE8	: static_size(8), align(right);			
    bcd	TLFXRTE9	: static_size(8), align(right);			
    bcd	TLBATN	: static_size(3), align(right);			
    bcd	TLBCIF	: static_size(10), align(right);			
    bcd	TLBACF	: static_size(10), align(right);			
    ascii	TLBPRD	: static_size(10),	padded_with(0x40);		
    ascii	TLBSRC	: static_size(1),	padded_with(0x40);		
    ascii	TLBREN	: static_size(1),	padded_with(0x40);		
    ascii	TLBIDC	: static_size(1),	padded_with(0x40);		
    ascii	TLBMDC	: static_size(1),	padded_with(0x40);		
    ascii	TLBXAT	: static_size(1),	padded_with(0x40);		
    ascii	TLBXMT	: static_size(1),	padded_with(0x40);		
    bcd	TLXWHC	: static_size(1), align(right);			
    bcd	TLBCDT	: static_size(3), align(right);			
    ascii	TLBCDC	: static_size(1),	padded_with(0x40);		
    bcd	TLBINT	: static_size(2), align(right);			
    ascii	TLBINC	: static_size(1),	padded_with(0x40);		
    ascii	TLCPCD	: static_size(1),	padded_with(0x40);		
    ascii	TLOVRB	: static_size(1),	padded_with(0x40);		
    bcd	TLOVRR	: static_size(3), align(right);			
    ascii	TLOVCD	: static_size(1),	padded_with(0x40);		
    ascii	TLBRFN	: static_size(20),	padded_with(0x40);		
    ascii	TLBYRF	: static_size(20),	padded_with(0x40);		
    ascii	TLXUFD	: static_size(20),	padded_with(0x40);		
    ascii	TLBTPN	: character_encoding("cp838"), static_size(40),	padded_with(0x40);		
    ascii	TLBRSA	: static_size(10),	padded_with(0x40);		
    ascii	TLBRSC	: static_size(3),	padded_with(0x40);		
    ascii	TLBORF	: static_size(10),	padded_with(0x40);		
    ascii	TLBKEY	: static_size(100),	padded_with(0x40);		
    ascii	TLBCLRG	: static_size(10),	padded_with(0x40);		
    ascii	TLBCLSR	: static_size(2),	padded_with(0x40);		
    ascii	TLRVCD1	: static_size(5),	padded_with(0x40);		
    ascii	TLRVCD2	: static_size(5),	padded_with(0x40);		
    ascii	FILL03	: static_size(6),	padded_with(0x40);		
    ascii	TLBRS1	: static_size(1),	padded_with(0x40);		
    ascii	TLBRS2	: static_size(1),	padded_with(0x40);		
    ascii	TLBRS3	: static_size(1),	padded_with(0x40);		
    ascii	TLBRS4	: static_size(1),	padded_with(0x40);		
    ascii	TLBRS5	: static_size(1),	padded_with(0x40);		
    ascii	TLBRS6	: static_size(1),	padded_with(0x40);		
    ascii	TLBRS7	: static_size(1),	padded_with(0x40);		
    ascii	TLBRS8	: static_size(1),	padded_with(0x40);		
    ascii	TLBRS9	: static_size(1),	padded_with(0x40);		
    ascii	TLBR10	: static_size(1),	padded_with(0x40);		
    ascii	TLBR11	: static_size(1),	padded_with(0x40);		
    ascii	TLBR12	: static_size(1),	padded_with(0x40);		
    ascii	TLBR13	: static_size(1),	padded_with(0x40);		
    ascii	TLBR14	: static_size(1),	padded_with(0x40);		
    ascii	TLBR15	: static_size(1),	padded_with(0x40);		
    ascii	TLBR16	: static_size(1),	padded_with(0x40);		
    ascii	TLBR17	: static_size(1),	padded_with(0x40);		
    ascii	TLBR18	: static_size(1),	padded_with(0x40);		
    ascii	TLBR19	: static_size(1),	padded_with(0x40);		
    ascii	TLBR20	: static_size(1),	padded_with(0x40);		
    ascii	TLBR21	: static_size(1),	padded_with(0x40);		
    ascii	TLBR22	: static_size(1),	padded_with(0x40);		
    ascii	TLBR23	: static_size(1),	padded_with(0x40);		
    ascii	TLBR24	: static_size(1),	padded_with(0x40);		
    ascii	TLBR25	: static_size(1),	padded_with(0x40);		
    ascii	TLBR26	: static_size(1),	padded_with(0x40);		
    ascii	TLBR27	: static_size(1),	padded_with(0x40);		
    ascii	TLBR28	: static_size(1),	padded_with(0x40);		
    ascii	TLBR29	: static_size(1),	padded_with(0x40);		
    ascii	TLBR30	: static_size(1),	padded_with(0x40);		
    ascii	TLBR31	: static_size(1),	padded_with(0x40);		
    ascii	TLBR32	: static_size(1),	padded_with(0x40);		
    ascii	TLBR33	: static_size(1),	padded_with(0x40);		
    ascii	TLBR34	: static_size(1),	padded_with(0x40);		
    ascii	TLBR35	: static_size(1),	padded_with(0x40);		
    ascii	TLBREM1: character_encoding("cp838"),	static_size(120),	padded_with(0x40);
    ascii	TLBDEAL	: static_size(10),	padded_with(0x40);
    ascii	TLBBNSEC	: static_size(2),	padded_with(0x40);		
    ascii	TLBBNBU	: static_size(1),	padded_with(0x40);		
    ascii	TLBBNSTE	: static_size(1),	padded_with(0x40);		
    ascii	TLMD01	: static_size(4),	padded_with(0x40);		
    ascii	TLCH01	: static_size(2),	padded_with(0x40);		
    ascii	TLCH02	: static_size(2),	padded_with(0x40);		
    ascii	TLCH03	: static_size(2),	padded_with(0x40);		
    ascii	TLCH04	: static_size(2),	padded_with(0x40);		
    ascii	TLCH05	: static_size(2),	padded_with(0x40);		
    ascii	TLCH06	: static_size(2),	padded_with(0x40);		
    ascii	TLCH07	: static_size(2),	padded_with(0x40);		
    ascii	TLCH08	: static_size(2),	padded_with(0x40);		
    ascii	TLCH09	: static_size(2),	padded_with(0x40);		
    ascii	TLCH10	: static_size(2),	padded_with(0x40);		
    ascii	TLCH11	: static_size(2),	padded_with(0x40);		
    ascii	TLCH12	: static_size(2),	padded_with(0x40);		
    ascii	TLCH13	: static_size(2),	padded_with(0x40);		
    ascii	TLCH14	: static_size(2),	padded_with(0x40);		
    ascii	TLCH15	: static_size(2),	padded_with(0x40);		
    ascii	TLCH16	: static_size(2),	padded_with(0x40);		
    ascii	TLCH17	: static_size(2),	padded_with(0x40);		
    ascii	TLCH18	: static_size(2),	padded_with(0x40);		
    ascii	TLCH19	: static_size(2),	padded_with(0x40);		
    ascii	TLCH20	: static_size(2),	padded_with(0x40);		
    ascii	TLCH21	: static_size(2),	padded_with(0x40);		
    ascii	TLCH22	: static_size(2),	padded_with(0x40);		
    ascii	TLCH23	: static_size(2),	padded_with(0x40);		
    ascii	TLCH24	: static_size(2),	padded_with(0x40);		
    ascii	TLCH25	: static_size(2),	padded_with(0x40);		
    ascii	TLCH26	: static_size(2),	padded_with(0x40);		
    ascii	TLCH27	: static_size(2),	padded_with(0x40);		
    ascii	TLCH28	: static_size(2),	padded_with(0x40);		
    ascii	TLCH29	: static_size(2),	padded_with(0x40);		
    ascii	TLCH30	: static_size(2),	padded_with(0x40);		
    ascii	FILL04	: static_size(1200),	padded_with(0x40);		    
};


in_map  TLLOG_InMap: external(TLLOG), target_internal(TLLOG_TgIn) {automatic;};
out_map TLLOG_OutMap: internal(TLLOG_TgIn), external(TLLOG) {automatic;};
decoder TLLOG_Decoder: in_map(TLLOG_InMap);
encoder TLLOG_Encoder : out_map(TLLOG_OutMap);
]]></string>
   <boolean name="IsValid" value="true"/>
</exportmultiplex>
