<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE pythonmodule_profile SYSTEM "jar:/mz/dtd/pythonmodule_profile.dtd">
<pythonmodule_profile category="Internal">
   <storable name="pythonmodule_profile" storable-id="dr.Configuration" ver="6.0">
      <array classname="java.lang.String" name="Access Groups -read -write -execute" size="3">
         <string name="0" value="All"/>
         <string name="1" value="Administrator"/>
         <string name="2" value="All"/>
      </array>
      <storable name="Auxiliary Data" null="true"/>
      <string name="Current Comment" null="true"/>
      <storable name="Data" storable-id="dr.PythonModuleData" ver="1.0">
         <object name="Source Code">
            <storable name="Object Internal" storable-id="dr.DRGeneratedFromContract$Field$FieldWrapper" ver="1.0">
               <object name="Value">
                  <string name="Object Internal"><![CDATA[from datetime import *
import xlrd
#import regex
            
def stringPadding(TypeData,stringValue,cellTypeDefine,sizePadding,book):
    #print stringValue
    #print cellTypeDefine
    if(cellTypeDefine=='Text'):
        if (str(stringValue).rfind('.0') > 0):
            stringValue = str(stringValue).replace('.0','').decode('utf-8').ljust(sizePadding,' ')
        else:
            stringValue = str(stringValue).decode('utf-8').ljust(sizePadding,' ')
        #print regex.findall(r'\X', stringValue)    
        #stringValue.encode('utf-8');
        #print stringValue
    elif(cellTypeDefine=='Account'):
        if stringValue.ctype==1: #ObjCellValue
            stringValue = stripString(stringValue.value)
        else: 
            objAccount = str(stringValue) 
            strType,stringValue = objAccount.split(":")
            stringValue = stripString(stringValue)
                            
        if (str(stringValue).rfind('.0') > 0):
            stringValue = str(stringValue).replace('.0','').rjust(sizePadding,'0')
        else:
            stringValue = str(stringValue).rjust(sizePadding,'0')   
                
    elif(cellTypeDefine=='Date'):
        if(stringValue=="" or stringValue==None):
            now = datetime.now()
            stringValue = datetime(now.year, now.month, now.day, now.hour, now.minute, now.second).strftime('%d/%m/%Y').ljust(sizePadding,' ')
        else:
            #year, month, day, hour, minute, second = xlrd.xldate_as_tuple(stringValue,book.datemode)
            #stringValue = datetime(year, month, day, hour, minute, second).strftime('%d/%m/%Y').ljust(sizePadding,' ')
            if (str(stringValue).rfind('.0') > 0):
                stringValue = str(stringValue).replace('.0','').decode('utf-8').ljust(sizePadding,' ')
            else:
                stringValue = str(stringValue).decode('utf-8').ljust(sizePadding,' ')
            
    elif(cellTypeDefine=='Amount'):
        #print stringValue
        stringValue = '{:.2f}'.format(stringValue)
        #print "Num : "+str(stringValue)
        stringValue = stringValue.replace('.','').rjust(sizePadding,'0')  
    elif(cellTypeDefine=='Fee1'):
        #if(stringValue=="" or stringValue==None):
        #    stringValue = "0.00"
        #else: 
        #    stringValue = str(stringValue)     
        stringValue = stringValue.ljust(sizePadding,' ')       
    elif(cellTypeDefine=='Fee2'):
        if(stringValue==0):
            stringValue = str(' ') 
        else:
            stringValue = str('Y')    
        stringValue = stringValue.ljust(sizePadding,' ')   
    else:
        raise Exception("Invalid Type of Cell")
    
    
    if((len(stringValue)>sizePadding) and TypeData!="H"):    
        raise Exception("String more than define length")
    else:
        return  stringValue 
    
def stringAppend(oldstringValue,appendString):
    oldstringValue = oldstringValue+appendString
    return oldstringValue     

def dump(obj):
   for attr in dir(obj):
       if hasattr( obj, attr ):
           print( "obj.%s = %s" % (attr, getattr(obj, attr)))

def stripString(stringValue):
    return stringValue.strip()]]></string>
               </object>
            </storable>
         </object>
         <boolean name="Source Code active" value="true"/>
         <string name="Source Code extref key" null="true"/>
         <enum name="Source Code fit" storable-id="dr.DRFieldInstanceType" value="FINAL"/>
         <boolean name="Source Code mod" value="false"/>
         <boolean name="Source Code pres" value="true"/>
      </storable>
      <string name="Folder" value="CM"/>
      <boolean name="Is Dirty" value="false"/>
      <boolean name="Is Encrypted" value="false"/>
      <boolean name="Is Locked" value="false"/>
      <boolean name="Is Valid" value="true"/>
      <string name="Key" value="MZ1523943390149"/>
      <string name="Modified By" value="mzadmin"/>
      <long name="Modified Date" value="1541759506356"/>
      <string name="Name" value="PYM_Common"/>
      <string name="Owner" value="mzadmin"/>
      <string name="Type" value="Python Module"/>
      <int name="Version" value="2"/>
      <string name="documentation" value=""/>
      <string name="parameters" value=""/>
   </storable>
</pythonmodule_profile>
